import { Accessor, ConstructorOf, MethodsOf, Setter, Signal, SignalOptions, max, min, createSignal, createMemo } from "./deps.ts"
import { FrameZCInfo, SpriteRect } from "./typedefs.ts"

interface FrameCutInit {
	id?: number
	children?: FrameCut[]
}

interface FrameZCInfoAccessor {
	left: Accessor<number>
	top: Accessor<number>
	right: Accessor<number>
	bottom: Accessor<number>
}

interface FrameZCInfoSetter {
	left: Setter<number>
	top: Setter<number>
	right: Setter<number>
	bottom: Setter<number>
}

class FrameCut implements FrameZCInfoAccessor {
	static id_count: number = 0

	left: Accessor<number>
	top: Accessor<number>
	right: Accessor<number>
	bottom: Accessor<number>

	setLeft?: Setter<number>
	setTop?: Setter<number>
	setRight?: Setter<number>
	setBottom?: Setter<number>

	id: number
	children: FrameCut[]
	freespace: FrameZCInfoAccessor
	setFreespace: FrameZCInfoSetter

	constructor(
		left: number | Accessor<number>,
		top: number | Accessor<number>,
		right: number | Accessor<number>,
		bottom: number | Accessor<number>,
		config?: FrameCutInit,
	) {
		this.children = config?.children ?? []
		this.id = config?.id ?? FrameCut.id_count++

		[this.left, this.setLeft] = (typeof left === "number" ? createSignal(left) : [left, undefined]);
		[this.top, this.setTop] = (typeof top === "number" ? createSignal(top) : [top, undefined]);
		[this.right, this.setRight] = (typeof right === "number" ? createSignal(right) : [right, undefined]);
		[this.bottom, this.setBottom] = (typeof bottom === "number" ? createSignal(bottom) : [bottom, undefined])

		this.freespace = {
			left: this.left,
			top: this.top,
			right: this.right,
			bottom: this.bottom,
		}
	}

	leftSplitChild = (value: number, margin: number = 0): FrameCut => {
		const
			{ left, top, right, bottom } = this.freespace,
			new_left = min(left + value, right - margin),
			child_framecut = new FrameCut(left, top, new_left, bottom)
		this.freespace.left = min(new_left + margin, right)
		this.children.push(child_framecut)
		return child_framecut
	}

}